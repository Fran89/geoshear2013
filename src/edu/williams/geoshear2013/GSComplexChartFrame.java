/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GSComplexChartFrame.java
 *
 * Created on Aug 24, 2010, 3:24:38 PM
 */

package edu.williams.geoshear2013;

import java.awt.Component;
import java.awt.FileDialog;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.NumberFormat;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;

/**
 *
 * @author cwarren
 */
public abstract class GSComplexChartFrame extends javax.swing.JFrame implements Watcher {

    MainWindow launchedFromWindow;
    GSComplexChart chart;

    private final FileDialog fileDialog;    // needed to support snapshots
    private final FileFilterImage filterImage = new FileFilterImage(); // needed to support snapshots

//    protected FormattedTextFieldMenuItem scaleTextItem = new FormattedTextFieldMenuItem(NumberFormat.getInstance());
    protected FormattedTextFieldMenuItem scaleTextItem = new FormattedTextFieldMenuItem();

    /** Creates new form GSComplexChartFrame */
    public GSComplexChartFrame(MainWindow launchedFrom) {
        this.fileDialog = new FileDialog(this);
        initComponents();
        this.launchedFromWindow = launchedFrom;

        scaleTextItem.setText("10.0");
        jMenuView.add(scaleTextItem,13);
        scaleTextItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formattedTextFieldMenuItemScaleFixedActionPerformed(evt);
            }
        });

        initChart();

    }
    
    public abstract void initChart();

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupScaleType = new javax.swing.ButtonGroup();
        buttonGroupScaleAdaption = new javax.swing.ButtonGroup();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuView = new javax.swing.JMenu();
        jCheckBoxMenuItemMajorCountours = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemMinorCountours = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemRefPoints = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemRefPointsDense = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemSelPebInfo = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemMeans = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDefPath = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jRadioButtonMenuItemLogScale = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemLinearScale = new javax.swing.JRadioButtonMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jRadioButtonMenuItemScaleAdapt = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemScaleFixed = new javax.swing.JRadioButtonMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemHideWindow = new javax.swing.JMenuItem();
        jMenuTakeSnapshot = new javax.swing.JMenu();

        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jMenuView.setText("Control");

        jCheckBoxMenuItemMajorCountours.setSelected(true);
        jCheckBoxMenuItemMajorCountours.setText("Major Contours");
        jCheckBoxMenuItemMajorCountours.setToolTipText("view major contours");
        jCheckBoxMenuItemMajorCountours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemMajorCountoursActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemMajorCountours);

        jCheckBoxMenuItemMinorCountours.setText("Minor Countours");
        jCheckBoxMenuItemMinorCountours.setToolTipText("view minor contours");
        jCheckBoxMenuItemMinorCountours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemMinorCountoursActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemMinorCountours);

        jCheckBoxMenuItemRefPoints.setSelected(true);
        jCheckBoxMenuItemRefPoints.setText("Reference Points");
        jCheckBoxMenuItemRefPoints.setToolTipText("show reference points");
        jCheckBoxMenuItemRefPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemRefPointsActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemRefPoints);

        jCheckBoxMenuItemRefPointsDense.setText("Reference Points, Dense");
        jCheckBoxMenuItemRefPointsDense.setToolTipText("show a denser grid of reference points");
        jCheckBoxMenuItemRefPointsDense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemRefPointsDenseActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemRefPointsDense);

        jCheckBoxMenuItemSelPebInfo.setSelected(true);
        jCheckBoxMenuItemSelPebInfo.setText("Selected Pebble Info");
        jCheckBoxMenuItemSelPebInfo.setToolTipText("show info for pebbles that are selected");
        jCheckBoxMenuItemSelPebInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemSelPebInfoActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemSelPebInfo);

        jCheckBoxMenuItemMeans.setSelected(true);
        jCheckBoxMenuItemMeans.setText("Harmonic & Vector Means");
        jCheckBoxMenuItemMeans.setToolTipText("show lines for the harmonic and vector means");
        jCheckBoxMenuItemMeans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemMeansActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemMeans);

        jCheckBoxMenuItemDefPath.setText("Deformation Path (tbd)");
        jCheckBoxMenuItemDefPath.setEnabled(false);
        jCheckBoxMenuItemDefPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDefPathActionPerformed(evt);
            }
        });
        jMenuView.add(jCheckBoxMenuItemDefPath);
        jMenuView.add(jSeparator1);

        buttonGroupScaleType.add(jRadioButtonMenuItemLogScale);
        jRadioButtonMenuItemLogScale.setText("Use Log Scale");
        jRadioButtonMenuItemLogScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemLogScaleActionPerformed(evt);
            }
        });
        jMenuView.add(jRadioButtonMenuItemLogScale);

        buttonGroupScaleType.add(jRadioButtonMenuItemLinearScale);
        jRadioButtonMenuItemLinearScale.setSelected(true);
        jRadioButtonMenuItemLinearScale.setText("Use Linear Scale");
        jRadioButtonMenuItemLinearScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemLinearScaleActionPerformed(evt);
            }
        });
        jMenuView.add(jRadioButtonMenuItemLinearScale);
        jMenuView.add(jSeparator2);

        buttonGroupScaleAdaption.add(jRadioButtonMenuItemScaleAdapt);
        jRadioButtonMenuItemScaleAdapt.setText("Adaptive RF Scale");
        jRadioButtonMenuItemScaleAdapt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemScaleAdaptActionPerformed(evt);
            }
        });
        jMenuView.add(jRadioButtonMenuItemScaleAdapt);

        buttonGroupScaleAdaption.add(jRadioButtonMenuItemScaleFixed);
        jRadioButtonMenuItemScaleFixed.setSelected(true);
        jRadioButtonMenuItemScaleFixed.setText("Fixed RF Scale");
        jRadioButtonMenuItemScaleFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemScaleFixedActionPerformed(evt);
            }
        });
        jMenuView.add(jRadioButtonMenuItemScaleFixed);
        jMenuView.add(jSeparator3);

        jMenuItemHideWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemHideWindow.setText("Close/Hide");
        jMenuItemHideWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHideWindowActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuItemHideWindow);

        jMenuBar1.add(jMenuView);

        jMenuTakeSnapshot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/williams/geoshear2013/img/icon_camera_small_20x15.gif"))); // NOI18N
        jMenuTakeSnapshot.setToolTipText("take a snapshot");
        jMenuTakeSnapshot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuTakeSnapshotMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuTakeSnapshot);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxMenuItemMajorCountoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemMajorCountoursActionPerformed
        chart.setShowContoursMajor(jCheckBoxMenuItemMajorCountours.isSelected());
        if (! chart.isShowContoursMajor())
        {
            chart.setShowContoursMinor(false);
            jCheckBoxMenuItemMinorCountours.setSelected(false);
        }
        this.repaint();
    }//GEN-LAST:event_jCheckBoxMenuItemMajorCountoursActionPerformed

    private void jCheckBoxMenuItemMinorCountoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemMinorCountoursActionPerformed
        chart.setShowContoursMinor(jCheckBoxMenuItemMinorCountours.isSelected());
        if (chart.isShowContoursMinor())
        {
            chart.setShowContoursMajor(true);
            jCheckBoxMenuItemMajorCountours.setSelected(true);
        }
        this.repaint();
    }//GEN-LAST:event_jCheckBoxMenuItemMinorCountoursActionPerformed

    private void jCheckBoxMenuItemRefPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemRefPointsActionPerformed
        chart.setShowReferenceDataSparse(jCheckBoxMenuItemRefPoints.isSelected());
        this.repaint();
    }//GEN-LAST:event_jCheckBoxMenuItemRefPointsActionPerformed

    private void jCheckBoxMenuItemSelPebInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemSelPebInfoActionPerformed
        chart.setShowInfoForSelected(jCheckBoxMenuItemSelPebInfo.isSelected());
        this.repaint();
    }//GEN-LAST:event_jCheckBoxMenuItemSelPebInfoActionPerformed

    private void jCheckBoxMenuItemDefPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDefPathActionPerformed
        chart.setShowTrace(jCheckBoxMenuItemDefPath.isSelected());
        this.repaint();
    }//GEN-LAST:event_jCheckBoxMenuItemDefPathActionPerformed

    private void jCheckBoxMenuItemMeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemMeansActionPerformed
        chart.setShowMeans(jCheckBoxMenuItemMeans.isSelected());
        this.repaint();
    }//GEN-LAST:event_jCheckBoxMenuItemMeansActionPerformed

    private void jRadioButtonMenuItemLinearScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemLinearScaleActionPerformed
        chart.setUseLogScale(jRadioButtonMenuItemLogScale.isSelected());
        this.handleChartScaling();
        this.repaint();
    }//GEN-LAST:event_jRadioButtonMenuItemLinearScaleActionPerformed

    private void jRadioButtonMenuItemLogScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemLogScaleActionPerformed
        chart.setUseLogScale(jRadioButtonMenuItemLogScale.isSelected());
        this.handleChartScaling();
        this.repaint();
    }//GEN-LAST:event_jRadioButtonMenuItemLogScaleActionPerformed

    public void handleChartScaling()
    {

    }

    private void jRadioButtonMenuItemScaleAdaptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemScaleAdaptActionPerformed
        chart.setUseAdaptiveScale(jRadioButtonMenuItemScaleAdapt.isSelected());
        chart.rescaleInfo();
        this.repaint();
    }//GEN-LAST:event_jRadioButtonMenuItemScaleAdaptActionPerformed

    private void jRadioButtonMenuItemScaleFixedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemScaleFixedActionPerformed
        chart.setUseAdaptiveScale(jRadioButtonMenuItemScaleAdapt.isSelected());
        chart.rescaleInfo();
        this.repaint();
    }//GEN-LAST:event_jRadioButtonMenuItemScaleFixedActionPerformed

    private void jMenuTakeSnapshotMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuTakeSnapshotMouseClicked
        try
        {
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            Robot robot = new Robot();
            BufferedImage image = robot.createScreenCapture (new Rectangle(this.chart.getLocationOnScreen (), this.chart.getSize ()));

            String filterText = "*.jpg;*.png;*.bmp";
            fileDialog.setMode(FileDialog.SAVE);
            fileDialog.setFile(filterText);
            fileDialog.setVisible(true);
            
            File[] saveFiles = fileDialog.getFiles();
            
            if (saveFiles.length > 0) {
                
                File saveFile = saveFiles[0];
                if (! saveFile.getName().matches(".*\\.\\w+$")) {
                    saveFile = new File(saveFile.getPath() + ".png");
                }
                if (filterImage.accept (saveFile))
                {
                    ImageIO.write (image,Util.getExtension (saveFile),saveFile);
                    JOptionPane.showMessageDialog (this,"Saved to "+saveFile.getCanonicalPath ());
                } else
                {
                    toolkit.beep ();
                    JOptionPane.showMessageDialog (this,"Unsupported format, only "+filterImage.getDescription ()+". Save aborted.");
                }
            }
        }
        catch (Exception exc)
        {
            JOptionPane.showMessageDialog (this,"Error taking snapshot: "+exc.getMessage());
        }
    }//GEN-LAST:event_jMenuTakeSnapshotMouseClicked

    private void jCheckBoxMenuItemRefPointsDenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemRefPointsDenseActionPerformed
        chart.setShowReferenceDataDense(jCheckBoxMenuItemRefPointsDense.isSelected());
        this.repaint();
    }//GEN-LAST:event_jCheckBoxMenuItemRefPointsDenseActionPerformed

    private void jMenuItemHideWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHideWindowActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItemHideWindowActionPerformed

    protected void formattedTextFieldMenuItemScaleFixedActionPerformed(java.awt.event.ActionEvent evt) {
        jRadioButtonMenuItemScaleFixed.setSelected(true);
        chart.setUseAdaptiveScale(jRadioButtonMenuItemScaleAdapt.isSelected());
        chart.rescaleInfo();
        this.repaint();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new GSComplexChartFrame().setVisible(true);
            }
        });
    }

    class FormattedTextFieldMenuItem extends JFormattedTextField implements MenuElement {

        public FormattedTextFieldMenuItem(  ) {
            super(NumberFormat.getInstance());
        }

        private FormattedTextFieldMenuItem(NumberFormat instance) {
            super(instance);
        }

        public void processMouseEvent(MouseEvent e, MenuElement path[ ],
                                      MenuSelectionManager manager) {}
        public void processKeyEvent(KeyEvent e, MenuElement path[ ],
                                    MenuSelectionManager manager) {}
        public void menuSelectionChanged(boolean isIncluded) {}
        public MenuElement[ ] getSubElements(  ) {return new MenuElement[0];}
        public Component getComponent(  ) {return this;}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupScaleAdaption;
    private javax.swing.ButtonGroup buttonGroupScaleType;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDefPath;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemMajorCountours;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemMeans;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemMinorCountours;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemRefPoints;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemRefPointsDense;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemSelPebInfo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemHideWindow;
    private javax.swing.JMenu jMenuTakeSnapshot;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemLinearScale;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemLogScale;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemScaleAdapt;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemScaleFixed;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables

    //--------------------------------------------------------------------------
    //--------------------------------------------------------------------------

    public MainWindow getLauncher() {
        return launchedFromWindow;
    }

    public void setLauncher(MainWindow launcher) {
        this.launchedFromWindow = launcher;
    }

    //--------------------------------------------------------------------------
    // implement Watcher stuff
    public void reactTo(Watchable w, Object arg) {
        chart.reactTo(w, arg);
    }

    public void setWatched(Watchable w)
    {
       chart.setWatched(w);
    }
    public Watchable getWatched()
    {
        return chart.getWatched();
    }
    public void clearWatched()
    {
        chart.clearWatched();
    }

    // NOTE: in this implemetation there is no partial watcher clearing - clearing any clears all
    public void clearWatched(Watchable w)
    {
        chart.clearWatched(w);
    }
}
